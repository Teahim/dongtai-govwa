package ssrf

import (
	"io"
	"net/http"

	"github.com/julienschmidt/httprouter"

	"github.com/govwa/util"
	"github.com/govwa/util/middleware"
)

type SSRF struct {
	Name string
}

func New() SSRF {
	return SSRF{}
}

func (self SSRF) SetRouter(r *httprouter.Router) {
	mw := middleware.New()
	r.GET("/ssrf", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(ssrfHandler))))
	r.POST("/ssrf", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(verifyHandler))))
}

type JsonRes struct {
	Code int    `json:"code"`
	Msg  string `json:"msg"`
}

func ssrfHandler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	var data = make(map[string]interface{})
	util.SafeRender(w, r, "template.ssrf", data)
}

func verifyHandler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	if r.Method == "POST" {
		//http.NewRequest(,第二个参数,) 返回的第一个参数的ptr
		//http.Do(返回的第一个参数的ptr)
		otp := r.FormValue("url")
		client := http.Client{}
		req, _ := http.NewRequest("GET", otp, nil)
		res, _ := client.Do(req)
		b, _ := io.ReadAll(res.Body)
		resc := JsonRes{
			Code: res.StatusCode,
			Msg:  string(b),
		}
		util.RenderAsJson(w, resc)
	}
}
