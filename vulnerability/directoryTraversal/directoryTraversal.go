package directoryTraversal

import (
	"encoding/json"
	"fmt"
	"github.com/govwa/user/session"
	"github.com/govwa/util"
	"io"
	"net/http"
	"os"

	"github.com/julienschmidt/httprouter"

	"github.com/govwa/util/middleware"
)

type DirectoryTraversal struct{}

func New() DirectoryTraversal {
	return DirectoryTraversal{}
}

func (self DirectoryTraversal) SetRouter(r *httprouter.Router) {
	mw := middleware.New()
	r.GET("/directoryTraversal", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(directoryTraversalHandler))))
	r.POST("/directoryTraversal", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(directoryTraversalActionHandler))))
}

func directoryTraversalHandler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	var data = make(map[string]interface{})
	util.SafeRender(w, r, "template.directioryTraversal", data)
}

type Req struct {
	Path string
	Uid  string
	File string
}

func directoryTraversalActionHandler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	body, _ := io.ReadAll(r.Body)
	defer r.Body.Close()
	var req Req
	err := json.Unmarshal(body, &req)
	session := session.New()
	sid := session.GetSession(r, "id")
	req.Uid = sid
	f, err := os.OpenFile(req.Path, os.O_RDONLY, 0600)
	if err != nil {
		fmt.Println(err)
		util.RenderAsJson(w, req)
		return
	}
	b, err := io.ReadAll(f)
	req.File = string(b)
	util.RenderAsJson(w, req)
}
